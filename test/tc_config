#! ruby
require 'test/unit'
require 'rafini'
require 'such/convention'

class UserSpace
  XDG = {}
  XDG['data'] = '~/.data' # Mock-up
end
class ClipboardManager
  VERSION = '4.0.210706' # Mock-up
  require 'clipboard_manager/config'
end

class TestConfig < Test::Unit::TestCase
  using Rafini::String
  CONFIG = ClipboardManager::CONFIG

  def test_convention
    assert_nil Such::Convention.validate(CONFIG)
  end

  def test_config
    # Sanity checks
    assert_equal Hash, CONFIG.class
    assert_equal ClipboardManager::VERSION.semantic(0..1), CONFIG[:about_dialog][:set_version]
    assert_equal 'Clipboard Manager', CONFIG[:about_dialog][:set_program_name]

    # Vefify isPwd
    rgx = Regexp.new CONFIG[:IsPwd], Regexp::EXTENDED
    assert_match rgx, 'aA1!'

    # Checking convention use
    ClipboardManager::CONFIG.each do |k,v|
      msg = "#{k}: #{v.inspect}"
      case k
      when /^[A-Z_]+$/ # CAPS
        assert_equal Array, v.class, msg
      when /^[a-z_]+$/ # lower
        assert_equal Hash, v.class, msg
      when /^[a-z_]+\!$/ # lower!
        assert_equal Array, v.class, msg
      when /^[a-zA-Z]+$/ # Camel
        assert((v.class==String) || (v.class==Integer), msg)
      when /^[a-zA-Z]+!$/ # Camel!
        assert_equal Hash, v.class, msg
      else
        raise "Got bad thing key :#{k}."
      end
    end

    CONFIG[:Tasks!].each do |k,v|
      str, key, clr, cmd = v
      rgx = Regexp.new str, Regexp::EXTENDED # ensure we can at least do this
      # ensure proper key method
      assert [:espeak,:open,:bashit,:reply].include?(key), "#{key} invalid task"
      #assert true
      # ensure that cmd makes sense
      if key==:bashit
        assert_equal String, cmd.class
      else
        assert_nil cmd
      end
    end
  end
end
